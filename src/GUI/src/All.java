
import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.dnd.*;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author root
 */
public class All extends javax.swing.JFrame {

    static void addImage(File path) {
        JLabel jl = new JLabel(Utils.createImageIcon(path), JLabel.CENTER);
        System.out.println(path.getPath());
        dropPanel.add(jl);
        dropPanel.revalidate();
        dropPanel.repaint();
    }

    /**
     * Creates new form All
     */
    public All() {
        super("Mosaicing of Torn Images");
        initComponents();
        dropPanel.setLayout(new GridLayout(0, 4));
        dropPanel.setBackground(new Color(200, 200, 200));
        new DropTarget(dropPanel, ddListen);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bOpen = new javax.swing.JButton();
        bStitch = new javax.swing.JButton();
        bClear = new javax.swing.JButton();
        dropPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miAddImg = new javax.swing.JMenuItem();
        miStitch = new javax.swing.JMenuItem();
        miClear = new javax.swing.JMenuItem();
        miQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        bOpen.setText("Open");
        bOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenActionPerformed(evt);
            }
        });

        bStitch.setText("Stitch");
        bStitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStitchActionPerformed(evt);
            }
        });

        bClear.setText("Clear");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        dropPanel.setBorder(BorderFactory.createDashedBorder(Color.gray, 2, 7, 7, false));
        dropPanel.setToolTipText("Drag Images over here");
        dropPanel.setAutoscrolls(true);
        dropPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dropPanel.setMaximumSize(new java.awt.Dimension(550, 400));

        javax.swing.GroupLayout dropPanelLayout = new javax.swing.GroupLayout(dropPanel);
        dropPanel.setLayout(dropPanelLayout);
        dropPanelLayout.setHorizontalGroup(
            dropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dropPanelLayout.setVerticalGroup(
            dropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        miAddImg.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miAddImg.setText("Add Image");
        miAddImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miAddImg);

        miStitch.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        miStitch.setText("Stitch Images");
        miStitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStitchActionPerformed(evt);
            }
        });
        jMenu1.add(miStitch);

        miClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        miClear.setText("Clear Images");
        miClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });
        jMenu1.add(miClear);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miQuit.setText("Quit");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        jMenu1.add(miQuit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        jMenu2.add(miAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 506, Short.MAX_VALUE)
                        .addComponent(bOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bStitch)
                        .addGap(11, 11, 11)
                        .addComponent(bClear))
                    .addComponent(dropPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bStitch)
                    .addComponent(bClear)
                    .addComponent(bOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        try {
            ddListen.l.clear();
            Component[] cs = dropPanel.getComponents();
            for(Component c : cs)
                dropPanel.remove(c);
            dropPanel.revalidate();
            dropPanel.repaint();
            File f = new File("Final_Output.jpg");
            if(f.exists() && !f.isDirectory()) {
                String[] c2 = {"mv", "Final_Output.jpg", "Previous_Output.jpg"};
                Process process = Runtime.getRuntime().exec(c2);
                process.waitFor();
            }
        } catch (Exception ex) {
            Logger.getLogger(All.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bClearActionPerformed

    private void bOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenActionPerformed
        JFileChooser fc = new JFileChooser("Choose torn images");
        fc.setMultiSelectionEnabled(true);
        fc.addChoosableFileFilter(imgFilter);
        fc.setAcceptAllFileFilterUsed(false);
        if(fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            for(File f : files) {
                if(!ddListen.l.contains(f.getPath()))
                    All.addImage(f);
                ddListen.l.add(f.getPath());
            }
        }
    }//GEN-LAST:event_bOpenActionPerformed

    private void bStitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStitchActionPerformed
        Iterator<String> itr = ddListen.l.iterator();
        String[] c2 = new String[ddListen.l.size() + 1];
        c2[0] = "./opensoft"; int i = 0;
        while(itr.hasNext())
            c2[(i++)+1] = itr.next();
        try {
            Process p = Runtime.getRuntime().exec("chmod 777 opensoft");
            p.waitFor();
            Process process = Runtime.getRuntime().exec(c2);
            process.waitFor();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        File f = new File("Final_Output.jpg");
        if(f.exists() && !f.isDirectory()) {
            Desktop dt = Desktop.getDesktop();
            try {
                dt.open(f);
            } catch (IOException ex) {
                Logger.getLogger(All.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else 
            JOptionPane.showMessageDialog(null, "Stitching Failed", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_bStitchActionPerformed

    private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        int b = JOptionPane.showConfirmDialog(null, "Do you want to exit ?", "Exit", JOptionPane.YES_NO_OPTION);
        if(b == JOptionPane.YES_OPTION)
            formWindowClosing(evt);
    }//GEN-LAST:event_miQuitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        JOptionPane.showMessageDialog(null, "Team 10\nOpenSoft 2014", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_miAboutActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
                String[] c2 = {"mv", "Final_Output.jpg", "Previous_Output.jpg"};
                Process process = Runtime.getRuntime().exec(c2);
                process.waitFor();
                System.exit(0);
            } catch (Exception ex) {
                Logger.getLogger(All.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new All().setVisible(true);
            }
        });
    }

    MyDragDropListener ddListen = new MyDragDropListener();
    javax.swing.filechooser.FileFilter imgFilter = new javax.swing.filechooser.FileFilter() {
        @Override
        public boolean accept(File f) {
            if (f.isDirectory())
                return true;
            String extension = Utils.getExtension(f);
            if (extension != null) {
                if (extension.equals(Utils.tiff) ||
                    extension.equals(Utils.tif) ||
                    extension.equals(Utils.gif) ||
                    extension.equals(Utils.jpeg) ||
                    extension.equals(Utils.jpg) ||
                    extension.equals(Utils.png)) {
                        return true;
                } else
                    return false;
            }

            return false;
        }
        @Override
        public String getDescription() {
            return "Simple Image filter";
        }
    };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClear;
    private javax.swing.JButton bOpen;
    private javax.swing.JButton bStitch;
    static private javax.swing.JPanel dropPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miAddImg;
    private javax.swing.JMenuItem miClear;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JMenuItem miStitch;
    // End of variables declaration//GEN-END:variables

    private void formWindowClosing(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}

class MyDragDropListener implements DropTargetListener {
    public Set<String> l = new LinkedHashSet<String>();
    
    @Override
    public void drop(DropTargetDropEvent event) {
        event.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable transferable = event.getTransferable();
        DataFlavor[] flavors = transferable.getTransferDataFlavors();

        for (DataFlavor flavor : flavors) {
            try {
                if (flavor.isFlavorJavaFileListType()) {
                    java.util.List<File> files = (java.util.List) transferable.getTransferData(flavor);
                    for (File file : files)  {
                        if(!l.contains(file.getPath()))
                            All.addImage(file);
                        l.add(file.getPath());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        event.dropComplete(true);
    }

    @Override
    public void dragEnter(DropTargetDragEvent event) {
    }

    @Override
    public void dragExit(DropTargetEvent event) {
    }

    @Override
    public void dragOver(DropTargetDragEvent event) {
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent event) {
    }
}

class Utils {
    public final static String jpeg = "jpeg";
    public final static String jpg = "jpg";
    public final static String gif = "gif";
    public final static String tiff = "tiff";
    public final static String tif = "tif";
    public final static String png = "png";
 
    /*
     * Get the extension of a file.
     */
    public static String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');
 
        if (i > 0 &&  i < s.length() - 1) {
            ext = s.substring(i+1).toLowerCase();
        }
        return ext;
    }
 
    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(File f) {
        try {
            int w = 100;
            BufferedImage img = ImageIO.read(f);
            BufferedImage bi = new BufferedImage(w, w, BufferedImage.SCALE_SMOOTH);
            Graphics2D g2d = (Graphics2D) bi.createGraphics();
            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
            g2d.drawImage(img, 0, 0, w, w, null);
            g2d.dispose();
            return new ImageIcon(bi);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return null;
    }
}